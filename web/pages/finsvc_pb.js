// source: finsvc.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
goog.exportSymbol('proto.BalanceSheet', null, global);
goog.exportSymbol('proto.BalanceSheets', null, global);
goog.exportSymbol('proto.CashFlow', null, global);
goog.exportSymbol('proto.CashFlows', null, global);
goog.exportSymbol('proto.Financials', null, global);
goog.exportSymbol('proto.GetRequest', null, global);
goog.exportSymbol('proto.IncomeStatement', null, global);
goog.exportSymbol('proto.IncomeStatements', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GetRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GetRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.GetRequest.displayName = 'proto.GetRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BalanceSheets = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.BalanceSheets.repeatedFields_, null);
};
goog.inherits(proto.BalanceSheets, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.BalanceSheets.displayName = 'proto.BalanceSheets';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BalanceSheet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.BalanceSheet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.BalanceSheet.displayName = 'proto.BalanceSheet';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IncomeStatements = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.IncomeStatements.repeatedFields_, null);
};
goog.inherits(proto.IncomeStatements, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.IncomeStatements.displayName = 'proto.IncomeStatements';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IncomeStatement = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.IncomeStatement, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.IncomeStatement.displayName = 'proto.IncomeStatement';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CashFlows = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.CashFlows.repeatedFields_, null);
};
goog.inherits(proto.CashFlows, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.CashFlows.displayName = 'proto.CashFlows';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CashFlow = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CashFlow, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.CashFlow.displayName = 'proto.CashFlow';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Financials = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Financials, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Financials.displayName = 'proto.Financials';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GetRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.GetRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GetRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    symbol: jspb.Message.getFieldWithDefault(msg, 1, ""),
    limit: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GetRequest}
 */
proto.GetRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GetRequest;
  return proto.GetRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GetRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GetRequest}
 */
proto.GetRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSymbol(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLimit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GetRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GetRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GetRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GetRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSymbol();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLimit();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional string symbol = 1;
 * @return {string}
 */
proto.GetRequest.prototype.getSymbol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.GetRequest} returns this
 */
proto.GetRequest.prototype.setSymbol = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 limit = 2;
 * @return {number}
 */
proto.GetRequest.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.GetRequest} returns this
 */
proto.GetRequest.prototype.setLimit = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.BalanceSheets.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BalanceSheets.prototype.toObject = function(opt_includeInstance) {
  return proto.BalanceSheets.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BalanceSheets} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BalanceSheets.toObject = function(includeInstance, msg) {
  var f, obj = {
    balancesheetsList: jspb.Message.toObjectList(msg.getBalancesheetsList(),
    proto.BalanceSheet.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BalanceSheets}
 */
proto.BalanceSheets.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BalanceSheets;
  return proto.BalanceSheets.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BalanceSheets} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BalanceSheets}
 */
proto.BalanceSheets.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.BalanceSheet;
      reader.readMessage(value,proto.BalanceSheet.deserializeBinaryFromReader);
      msg.addBalancesheets(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BalanceSheets.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.BalanceSheets.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.BalanceSheets} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BalanceSheets.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBalancesheetsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.BalanceSheet.serializeBinaryToWriter
    );
  }
};


/**
 * repeated BalanceSheet balanceSheets = 1;
 * @return {!Array<!proto.BalanceSheet>}
 */
proto.BalanceSheets.prototype.getBalancesheetsList = function() {
  return /** @type{!Array<!proto.BalanceSheet>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.BalanceSheet, 1));
};


/**
 * @param {!Array<!proto.BalanceSheet>} value
 * @return {!proto.BalanceSheets} returns this
*/
proto.BalanceSheets.prototype.setBalancesheetsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.BalanceSheet=} opt_value
 * @param {number=} opt_index
 * @return {!proto.BalanceSheet}
 */
proto.BalanceSheets.prototype.addBalancesheets = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.BalanceSheet, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.BalanceSheets} returns this
 */
proto.BalanceSheets.prototype.clearBalancesheetsList = function() {
  return this.setBalancesheetsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BalanceSheet.prototype.toObject = function(opt_includeInstance) {
  return proto.BalanceSheet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BalanceSheet} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BalanceSheet.toObject = function(includeInstance, msg) {
  var f, obj = {
    reportdate: (f = msg.getReportdate()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    filingtype: jspb.Message.getFieldWithDefault(msg, 2, ""),
    fiscaldate: (f = msg.getFiscaldate()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    fiscalquarter: jspb.Message.getFieldWithDefault(msg, 4, 0),
    fiscalyear: jspb.Message.getFieldWithDefault(msg, 5, 0),
    currency: jspb.Message.getFieldWithDefault(msg, 6, ""),
    currentcash: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 0.0),
    shortterminvestments: jspb.Message.getFloatingPointFieldWithDefault(msg, 8, 0.0),
    receivables: jspb.Message.getFloatingPointFieldWithDefault(msg, 9, 0.0),
    inventory: jspb.Message.getFloatingPointFieldWithDefault(msg, 10, 0.0),
    othercurrentassets: jspb.Message.getFloatingPointFieldWithDefault(msg, 11, 0.0),
    currentassets: jspb.Message.getFloatingPointFieldWithDefault(msg, 12, 0.0),
    longterminvestments: jspb.Message.getFloatingPointFieldWithDefault(msg, 13, 0.0),
    propertyplantequipment: jspb.Message.getFloatingPointFieldWithDefault(msg, 14, 0.0),
    goodwill: jspb.Message.getFloatingPointFieldWithDefault(msg, 15, 0.0),
    intangibleassets: jspb.Message.getFloatingPointFieldWithDefault(msg, 16, 0.0),
    otherassets: jspb.Message.getFloatingPointFieldWithDefault(msg, 17, 0.0),
    totalassets: jspb.Message.getFloatingPointFieldWithDefault(msg, 18, 0.0),
    accountspayable: jspb.Message.getFloatingPointFieldWithDefault(msg, 19, 0.0),
    currentlongtermdebt: jspb.Message.getFloatingPointFieldWithDefault(msg, 20, 0.0),
    othercurrentliabilities: jspb.Message.getFloatingPointFieldWithDefault(msg, 21, 0.0),
    totalcurrentliabilities: jspb.Message.getFloatingPointFieldWithDefault(msg, 22, 0.0),
    longtermdebt: jspb.Message.getFloatingPointFieldWithDefault(msg, 23, 0.0),
    otherliabilities: jspb.Message.getFloatingPointFieldWithDefault(msg, 24, 0.0),
    minorityinterest: jspb.Message.getFloatingPointFieldWithDefault(msg, 25, 0.0),
    totalliabilities: jspb.Message.getFloatingPointFieldWithDefault(msg, 26, 0.0),
    commonstock: jspb.Message.getFloatingPointFieldWithDefault(msg, 27, 0.0),
    retainedearnings: jspb.Message.getFloatingPointFieldWithDefault(msg, 28, 0.0),
    treasurystock: jspb.Message.getFloatingPointFieldWithDefault(msg, 29, 0.0),
    capitalsurplus: jspb.Message.getFloatingPointFieldWithDefault(msg, 30, 0.0),
    shareholderequity: jspb.Message.getFloatingPointFieldWithDefault(msg, 31, 0.0),
    nettangibleassets: jspb.Message.getFloatingPointFieldWithDefault(msg, 32, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BalanceSheet}
 */
proto.BalanceSheet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BalanceSheet;
  return proto.BalanceSheet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BalanceSheet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BalanceSheet}
 */
proto.BalanceSheet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setReportdate(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFilingtype(value);
      break;
    case 3:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setFiscaldate(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFiscalquarter(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFiscalyear(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setCurrency(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCurrentcash(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setShortterminvestments(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setReceivables(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setInventory(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setOthercurrentassets(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCurrentassets(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLongterminvestments(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPropertyplantequipment(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setGoodwill(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setIntangibleassets(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setOtherassets(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTotalassets(value);
      break;
    case 19:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAccountspayable(value);
      break;
    case 20:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCurrentlongtermdebt(value);
      break;
    case 21:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setOthercurrentliabilities(value);
      break;
    case 22:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTotalcurrentliabilities(value);
      break;
    case 23:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLongtermdebt(value);
      break;
    case 24:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setOtherliabilities(value);
      break;
    case 25:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMinorityinterest(value);
      break;
    case 26:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTotalliabilities(value);
      break;
    case 27:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCommonstock(value);
      break;
    case 28:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setRetainedearnings(value);
      break;
    case 29:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTreasurystock(value);
      break;
    case 30:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCapitalsurplus(value);
      break;
    case 31:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setShareholderequity(value);
      break;
    case 32:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setNettangibleassets(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BalanceSheet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.BalanceSheet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.BalanceSheet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BalanceSheet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReportdate();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getFilingtype();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getFiscaldate();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getFiscalquarter();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getFiscalyear();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getCurrency();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getCurrentcash();
  if (f !== 0.0) {
    writer.writeDouble(
      7,
      f
    );
  }
  f = message.getShortterminvestments();
  if (f !== 0.0) {
    writer.writeDouble(
      8,
      f
    );
  }
  f = message.getReceivables();
  if (f !== 0.0) {
    writer.writeDouble(
      9,
      f
    );
  }
  f = message.getInventory();
  if (f !== 0.0) {
    writer.writeDouble(
      10,
      f
    );
  }
  f = message.getOthercurrentassets();
  if (f !== 0.0) {
    writer.writeDouble(
      11,
      f
    );
  }
  f = message.getCurrentassets();
  if (f !== 0.0) {
    writer.writeDouble(
      12,
      f
    );
  }
  f = message.getLongterminvestments();
  if (f !== 0.0) {
    writer.writeDouble(
      13,
      f
    );
  }
  f = message.getPropertyplantequipment();
  if (f !== 0.0) {
    writer.writeDouble(
      14,
      f
    );
  }
  f = message.getGoodwill();
  if (f !== 0.0) {
    writer.writeDouble(
      15,
      f
    );
  }
  f = message.getIntangibleassets();
  if (f !== 0.0) {
    writer.writeDouble(
      16,
      f
    );
  }
  f = message.getOtherassets();
  if (f !== 0.0) {
    writer.writeDouble(
      17,
      f
    );
  }
  f = message.getTotalassets();
  if (f !== 0.0) {
    writer.writeDouble(
      18,
      f
    );
  }
  f = message.getAccountspayable();
  if (f !== 0.0) {
    writer.writeDouble(
      19,
      f
    );
  }
  f = message.getCurrentlongtermdebt();
  if (f !== 0.0) {
    writer.writeDouble(
      20,
      f
    );
  }
  f = message.getOthercurrentliabilities();
  if (f !== 0.0) {
    writer.writeDouble(
      21,
      f
    );
  }
  f = message.getTotalcurrentliabilities();
  if (f !== 0.0) {
    writer.writeDouble(
      22,
      f
    );
  }
  f = message.getLongtermdebt();
  if (f !== 0.0) {
    writer.writeDouble(
      23,
      f
    );
  }
  f = message.getOtherliabilities();
  if (f !== 0.0) {
    writer.writeDouble(
      24,
      f
    );
  }
  f = message.getMinorityinterest();
  if (f !== 0.0) {
    writer.writeDouble(
      25,
      f
    );
  }
  f = message.getTotalliabilities();
  if (f !== 0.0) {
    writer.writeDouble(
      26,
      f
    );
  }
  f = message.getCommonstock();
  if (f !== 0.0) {
    writer.writeDouble(
      27,
      f
    );
  }
  f = message.getRetainedearnings();
  if (f !== 0.0) {
    writer.writeDouble(
      28,
      f
    );
  }
  f = message.getTreasurystock();
  if (f !== 0.0) {
    writer.writeDouble(
      29,
      f
    );
  }
  f = message.getCapitalsurplus();
  if (f !== 0.0) {
    writer.writeDouble(
      30,
      f
    );
  }
  f = message.getShareholderequity();
  if (f !== 0.0) {
    writer.writeDouble(
      31,
      f
    );
  }
  f = message.getNettangibleassets();
  if (f !== 0.0) {
    writer.writeDouble(
      32,
      f
    );
  }
};


/**
 * optional google.protobuf.Timestamp reportDate = 1;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.BalanceSheet.prototype.getReportdate = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 1));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.BalanceSheet} returns this
*/
proto.BalanceSheet.prototype.setReportdate = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.BalanceSheet} returns this
 */
proto.BalanceSheet.prototype.clearReportdate = function() {
  return this.setReportdate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.BalanceSheet.prototype.hasReportdate = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string filingType = 2;
 * @return {string}
 */
proto.BalanceSheet.prototype.getFilingtype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.BalanceSheet} returns this
 */
proto.BalanceSheet.prototype.setFilingtype = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional google.protobuf.Timestamp fiscalDate = 3;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.BalanceSheet.prototype.getFiscaldate = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 3));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.BalanceSheet} returns this
*/
proto.BalanceSheet.prototype.setFiscaldate = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.BalanceSheet} returns this
 */
proto.BalanceSheet.prototype.clearFiscaldate = function() {
  return this.setFiscaldate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.BalanceSheet.prototype.hasFiscaldate = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int32 fiscalQuarter = 4;
 * @return {number}
 */
proto.BalanceSheet.prototype.getFiscalquarter = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.BalanceSheet} returns this
 */
proto.BalanceSheet.prototype.setFiscalquarter = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 fiscalYear = 5;
 * @return {number}
 */
proto.BalanceSheet.prototype.getFiscalyear = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.BalanceSheet} returns this
 */
proto.BalanceSheet.prototype.setFiscalyear = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string currency = 6;
 * @return {string}
 */
proto.BalanceSheet.prototype.getCurrency = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.BalanceSheet} returns this
 */
proto.BalanceSheet.prototype.setCurrency = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional double currentCash = 7;
 * @return {number}
 */
proto.BalanceSheet.prototype.getCurrentcash = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.BalanceSheet} returns this
 */
proto.BalanceSheet.prototype.setCurrentcash = function(value) {
  return jspb.Message.setProto3FloatField(this, 7, value);
};


/**
 * optional double shortTermInvestments = 8;
 * @return {number}
 */
proto.BalanceSheet.prototype.getShortterminvestments = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.BalanceSheet} returns this
 */
proto.BalanceSheet.prototype.setShortterminvestments = function(value) {
  return jspb.Message.setProto3FloatField(this, 8, value);
};


/**
 * optional double receivables = 9;
 * @return {number}
 */
proto.BalanceSheet.prototype.getReceivables = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 9, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.BalanceSheet} returns this
 */
proto.BalanceSheet.prototype.setReceivables = function(value) {
  return jspb.Message.setProto3FloatField(this, 9, value);
};


/**
 * optional double inventory = 10;
 * @return {number}
 */
proto.BalanceSheet.prototype.getInventory = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 10, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.BalanceSheet} returns this
 */
proto.BalanceSheet.prototype.setInventory = function(value) {
  return jspb.Message.setProto3FloatField(this, 10, value);
};


/**
 * optional double otherCurrentAssets = 11;
 * @return {number}
 */
proto.BalanceSheet.prototype.getOthercurrentassets = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 11, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.BalanceSheet} returns this
 */
proto.BalanceSheet.prototype.setOthercurrentassets = function(value) {
  return jspb.Message.setProto3FloatField(this, 11, value);
};


/**
 * optional double currentAssets = 12;
 * @return {number}
 */
proto.BalanceSheet.prototype.getCurrentassets = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 12, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.BalanceSheet} returns this
 */
proto.BalanceSheet.prototype.setCurrentassets = function(value) {
  return jspb.Message.setProto3FloatField(this, 12, value);
};


/**
 * optional double longTermInvestments = 13;
 * @return {number}
 */
proto.BalanceSheet.prototype.getLongterminvestments = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 13, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.BalanceSheet} returns this
 */
proto.BalanceSheet.prototype.setLongterminvestments = function(value) {
  return jspb.Message.setProto3FloatField(this, 13, value);
};


/**
 * optional double propertyPlantEquipment = 14;
 * @return {number}
 */
proto.BalanceSheet.prototype.getPropertyplantequipment = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 14, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.BalanceSheet} returns this
 */
proto.BalanceSheet.prototype.setPropertyplantequipment = function(value) {
  return jspb.Message.setProto3FloatField(this, 14, value);
};


/**
 * optional double goodwill = 15;
 * @return {number}
 */
proto.BalanceSheet.prototype.getGoodwill = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 15, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.BalanceSheet} returns this
 */
proto.BalanceSheet.prototype.setGoodwill = function(value) {
  return jspb.Message.setProto3FloatField(this, 15, value);
};


/**
 * optional double intangibleAssets = 16;
 * @return {number}
 */
proto.BalanceSheet.prototype.getIntangibleassets = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 16, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.BalanceSheet} returns this
 */
proto.BalanceSheet.prototype.setIntangibleassets = function(value) {
  return jspb.Message.setProto3FloatField(this, 16, value);
};


/**
 * optional double otherAssets = 17;
 * @return {number}
 */
proto.BalanceSheet.prototype.getOtherassets = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 17, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.BalanceSheet} returns this
 */
proto.BalanceSheet.prototype.setOtherassets = function(value) {
  return jspb.Message.setProto3FloatField(this, 17, value);
};


/**
 * optional double totalAssets = 18;
 * @return {number}
 */
proto.BalanceSheet.prototype.getTotalassets = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 18, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.BalanceSheet} returns this
 */
proto.BalanceSheet.prototype.setTotalassets = function(value) {
  return jspb.Message.setProto3FloatField(this, 18, value);
};


/**
 * optional double accountsPayable = 19;
 * @return {number}
 */
proto.BalanceSheet.prototype.getAccountspayable = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 19, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.BalanceSheet} returns this
 */
proto.BalanceSheet.prototype.setAccountspayable = function(value) {
  return jspb.Message.setProto3FloatField(this, 19, value);
};


/**
 * optional double currentLongTermDebt = 20;
 * @return {number}
 */
proto.BalanceSheet.prototype.getCurrentlongtermdebt = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 20, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.BalanceSheet} returns this
 */
proto.BalanceSheet.prototype.setCurrentlongtermdebt = function(value) {
  return jspb.Message.setProto3FloatField(this, 20, value);
};


/**
 * optional double otherCurrentLiabilities = 21;
 * @return {number}
 */
proto.BalanceSheet.prototype.getOthercurrentliabilities = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 21, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.BalanceSheet} returns this
 */
proto.BalanceSheet.prototype.setOthercurrentliabilities = function(value) {
  return jspb.Message.setProto3FloatField(this, 21, value);
};


/**
 * optional double totalCurrentLiabilities = 22;
 * @return {number}
 */
proto.BalanceSheet.prototype.getTotalcurrentliabilities = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 22, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.BalanceSheet} returns this
 */
proto.BalanceSheet.prototype.setTotalcurrentliabilities = function(value) {
  return jspb.Message.setProto3FloatField(this, 22, value);
};


/**
 * optional double longTermDebt = 23;
 * @return {number}
 */
proto.BalanceSheet.prototype.getLongtermdebt = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 23, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.BalanceSheet} returns this
 */
proto.BalanceSheet.prototype.setLongtermdebt = function(value) {
  return jspb.Message.setProto3FloatField(this, 23, value);
};


/**
 * optional double otherLiabilities = 24;
 * @return {number}
 */
proto.BalanceSheet.prototype.getOtherliabilities = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 24, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.BalanceSheet} returns this
 */
proto.BalanceSheet.prototype.setOtherliabilities = function(value) {
  return jspb.Message.setProto3FloatField(this, 24, value);
};


/**
 * optional double minorityInterest = 25;
 * @return {number}
 */
proto.BalanceSheet.prototype.getMinorityinterest = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 25, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.BalanceSheet} returns this
 */
proto.BalanceSheet.prototype.setMinorityinterest = function(value) {
  return jspb.Message.setProto3FloatField(this, 25, value);
};


/**
 * optional double totalLiabilities = 26;
 * @return {number}
 */
proto.BalanceSheet.prototype.getTotalliabilities = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 26, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.BalanceSheet} returns this
 */
proto.BalanceSheet.prototype.setTotalliabilities = function(value) {
  return jspb.Message.setProto3FloatField(this, 26, value);
};


/**
 * optional double commonStock = 27;
 * @return {number}
 */
proto.BalanceSheet.prototype.getCommonstock = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 27, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.BalanceSheet} returns this
 */
proto.BalanceSheet.prototype.setCommonstock = function(value) {
  return jspb.Message.setProto3FloatField(this, 27, value);
};


/**
 * optional double retainedEarnings = 28;
 * @return {number}
 */
proto.BalanceSheet.prototype.getRetainedearnings = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 28, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.BalanceSheet} returns this
 */
proto.BalanceSheet.prototype.setRetainedearnings = function(value) {
  return jspb.Message.setProto3FloatField(this, 28, value);
};


/**
 * optional double treasuryStock = 29;
 * @return {number}
 */
proto.BalanceSheet.prototype.getTreasurystock = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 29, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.BalanceSheet} returns this
 */
proto.BalanceSheet.prototype.setTreasurystock = function(value) {
  return jspb.Message.setProto3FloatField(this, 29, value);
};


/**
 * optional double capitalSurplus = 30;
 * @return {number}
 */
proto.BalanceSheet.prototype.getCapitalsurplus = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 30, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.BalanceSheet} returns this
 */
proto.BalanceSheet.prototype.setCapitalsurplus = function(value) {
  return jspb.Message.setProto3FloatField(this, 30, value);
};


/**
 * optional double shareholderEquity = 31;
 * @return {number}
 */
proto.BalanceSheet.prototype.getShareholderequity = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 31, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.BalanceSheet} returns this
 */
proto.BalanceSheet.prototype.setShareholderequity = function(value) {
  return jspb.Message.setProto3FloatField(this, 31, value);
};


/**
 * optional double netTangibleAssets = 32;
 * @return {number}
 */
proto.BalanceSheet.prototype.getNettangibleassets = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 32, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.BalanceSheet} returns this
 */
proto.BalanceSheet.prototype.setNettangibleassets = function(value) {
  return jspb.Message.setProto3FloatField(this, 32, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.IncomeStatements.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IncomeStatements.prototype.toObject = function(opt_includeInstance) {
  return proto.IncomeStatements.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IncomeStatements} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IncomeStatements.toObject = function(includeInstance, msg) {
  var f, obj = {
    incomestatementsList: jspb.Message.toObjectList(msg.getIncomestatementsList(),
    proto.IncomeStatement.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IncomeStatements}
 */
proto.IncomeStatements.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IncomeStatements;
  return proto.IncomeStatements.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IncomeStatements} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IncomeStatements}
 */
proto.IncomeStatements.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.IncomeStatement;
      reader.readMessage(value,proto.IncomeStatement.deserializeBinaryFromReader);
      msg.addIncomestatements(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IncomeStatements.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IncomeStatements.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IncomeStatements} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IncomeStatements.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIncomestatementsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.IncomeStatement.serializeBinaryToWriter
    );
  }
};


/**
 * repeated IncomeStatement incomeStatements = 1;
 * @return {!Array<!proto.IncomeStatement>}
 */
proto.IncomeStatements.prototype.getIncomestatementsList = function() {
  return /** @type{!Array<!proto.IncomeStatement>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.IncomeStatement, 1));
};


/**
 * @param {!Array<!proto.IncomeStatement>} value
 * @return {!proto.IncomeStatements} returns this
*/
proto.IncomeStatements.prototype.setIncomestatementsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.IncomeStatement=} opt_value
 * @param {number=} opt_index
 * @return {!proto.IncomeStatement}
 */
proto.IncomeStatements.prototype.addIncomestatements = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.IncomeStatement, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.IncomeStatements} returns this
 */
proto.IncomeStatements.prototype.clearIncomestatementsList = function() {
  return this.setIncomestatementsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IncomeStatement.prototype.toObject = function(opt_includeInstance) {
  return proto.IncomeStatement.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IncomeStatement} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IncomeStatement.toObject = function(includeInstance, msg) {
  var f, obj = {
    reportdate: (f = msg.getReportdate()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    fiscaldate: (f = msg.getFiscaldate()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    currency: jspb.Message.getFieldWithDefault(msg, 3, ""),
    totalrevenue: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    costofrevenue: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
    grossprofit: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
    researchanddevelopment: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 0.0),
    sellinggeneralandadmin: jspb.Message.getFloatingPointFieldWithDefault(msg, 8, 0.0),
    operatingexpense: jspb.Message.getFloatingPointFieldWithDefault(msg, 9, 0.0),
    operatingincome: jspb.Message.getFloatingPointFieldWithDefault(msg, 10, 0.0),
    otherincomeexpensenet: jspb.Message.getFloatingPointFieldWithDefault(msg, 11, 0.0),
    ebit: jspb.Message.getFloatingPointFieldWithDefault(msg, 12, 0.0),
    interestincome: jspb.Message.getFloatingPointFieldWithDefault(msg, 13, 0.0),
    pretaxincome: jspb.Message.getFloatingPointFieldWithDefault(msg, 14, 0.0),
    incometax: jspb.Message.getFloatingPointFieldWithDefault(msg, 15, 0.0),
    minorityinterest: jspb.Message.getFloatingPointFieldWithDefault(msg, 16, 0.0),
    netincome: jspb.Message.getFloatingPointFieldWithDefault(msg, 17, 0.0),
    netincomebasic: jspb.Message.getFloatingPointFieldWithDefault(msg, 18, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IncomeStatement}
 */
proto.IncomeStatement.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IncomeStatement;
  return proto.IncomeStatement.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IncomeStatement} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IncomeStatement}
 */
proto.IncomeStatement.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setReportdate(value);
      break;
    case 2:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setFiscaldate(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCurrency(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTotalrevenue(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCostofrevenue(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setGrossprofit(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setResearchanddevelopment(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSellinggeneralandadmin(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setOperatingexpense(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setOperatingincome(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setOtherincomeexpensenet(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setEbit(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setInterestincome(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPretaxincome(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setIncometax(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMinorityinterest(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setNetincome(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setNetincomebasic(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IncomeStatement.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IncomeStatement.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IncomeStatement} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IncomeStatement.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReportdate();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getFiscaldate();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getCurrency();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTotalrevenue();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = message.getCostofrevenue();
  if (f !== 0.0) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = message.getGrossprofit();
  if (f !== 0.0) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = message.getResearchanddevelopment();
  if (f !== 0.0) {
    writer.writeDouble(
      7,
      f
    );
  }
  f = message.getSellinggeneralandadmin();
  if (f !== 0.0) {
    writer.writeDouble(
      8,
      f
    );
  }
  f = message.getOperatingexpense();
  if (f !== 0.0) {
    writer.writeDouble(
      9,
      f
    );
  }
  f = message.getOperatingincome();
  if (f !== 0.0) {
    writer.writeDouble(
      10,
      f
    );
  }
  f = message.getOtherincomeexpensenet();
  if (f !== 0.0) {
    writer.writeDouble(
      11,
      f
    );
  }
  f = message.getEbit();
  if (f !== 0.0) {
    writer.writeDouble(
      12,
      f
    );
  }
  f = message.getInterestincome();
  if (f !== 0.0) {
    writer.writeDouble(
      13,
      f
    );
  }
  f = message.getPretaxincome();
  if (f !== 0.0) {
    writer.writeDouble(
      14,
      f
    );
  }
  f = message.getIncometax();
  if (f !== 0.0) {
    writer.writeDouble(
      15,
      f
    );
  }
  f = message.getMinorityinterest();
  if (f !== 0.0) {
    writer.writeDouble(
      16,
      f
    );
  }
  f = message.getNetincome();
  if (f !== 0.0) {
    writer.writeDouble(
      17,
      f
    );
  }
  f = message.getNetincomebasic();
  if (f !== 0.0) {
    writer.writeDouble(
      18,
      f
    );
  }
};


/**
 * optional google.protobuf.Timestamp reportDate = 1;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.IncomeStatement.prototype.getReportdate = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 1));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.IncomeStatement} returns this
*/
proto.IncomeStatement.prototype.setReportdate = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.IncomeStatement} returns this
 */
proto.IncomeStatement.prototype.clearReportdate = function() {
  return this.setReportdate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.IncomeStatement.prototype.hasReportdate = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional google.protobuf.Timestamp fiscalDate = 2;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.IncomeStatement.prototype.getFiscaldate = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 2));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.IncomeStatement} returns this
*/
proto.IncomeStatement.prototype.setFiscaldate = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.IncomeStatement} returns this
 */
proto.IncomeStatement.prototype.clearFiscaldate = function() {
  return this.setFiscaldate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.IncomeStatement.prototype.hasFiscaldate = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string currency = 3;
 * @return {string}
 */
proto.IncomeStatement.prototype.getCurrency = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.IncomeStatement} returns this
 */
proto.IncomeStatement.prototype.setCurrency = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional double totalRevenue = 4;
 * @return {number}
 */
proto.IncomeStatement.prototype.getTotalrevenue = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.IncomeStatement} returns this
 */
proto.IncomeStatement.prototype.setTotalrevenue = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional double costOfRevenue = 5;
 * @return {number}
 */
proto.IncomeStatement.prototype.getCostofrevenue = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.IncomeStatement} returns this
 */
proto.IncomeStatement.prototype.setCostofrevenue = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional double grossProfit = 6;
 * @return {number}
 */
proto.IncomeStatement.prototype.getGrossprofit = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.IncomeStatement} returns this
 */
proto.IncomeStatement.prototype.setGrossprofit = function(value) {
  return jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional double researchAndDevelopment = 7;
 * @return {number}
 */
proto.IncomeStatement.prototype.getResearchanddevelopment = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.IncomeStatement} returns this
 */
proto.IncomeStatement.prototype.setResearchanddevelopment = function(value) {
  return jspb.Message.setProto3FloatField(this, 7, value);
};


/**
 * optional double sellingGeneralAndAdmin = 8;
 * @return {number}
 */
proto.IncomeStatement.prototype.getSellinggeneralandadmin = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.IncomeStatement} returns this
 */
proto.IncomeStatement.prototype.setSellinggeneralandadmin = function(value) {
  return jspb.Message.setProto3FloatField(this, 8, value);
};


/**
 * optional double operatingExpense = 9;
 * @return {number}
 */
proto.IncomeStatement.prototype.getOperatingexpense = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 9, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.IncomeStatement} returns this
 */
proto.IncomeStatement.prototype.setOperatingexpense = function(value) {
  return jspb.Message.setProto3FloatField(this, 9, value);
};


/**
 * optional double operatingIncome = 10;
 * @return {number}
 */
proto.IncomeStatement.prototype.getOperatingincome = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 10, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.IncomeStatement} returns this
 */
proto.IncomeStatement.prototype.setOperatingincome = function(value) {
  return jspb.Message.setProto3FloatField(this, 10, value);
};


/**
 * optional double otherIncomeExpenseNet = 11;
 * @return {number}
 */
proto.IncomeStatement.prototype.getOtherincomeexpensenet = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 11, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.IncomeStatement} returns this
 */
proto.IncomeStatement.prototype.setOtherincomeexpensenet = function(value) {
  return jspb.Message.setProto3FloatField(this, 11, value);
};


/**
 * optional double ebit = 12;
 * @return {number}
 */
proto.IncomeStatement.prototype.getEbit = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 12, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.IncomeStatement} returns this
 */
proto.IncomeStatement.prototype.setEbit = function(value) {
  return jspb.Message.setProto3FloatField(this, 12, value);
};


/**
 * optional double interestIncome = 13;
 * @return {number}
 */
proto.IncomeStatement.prototype.getInterestincome = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 13, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.IncomeStatement} returns this
 */
proto.IncomeStatement.prototype.setInterestincome = function(value) {
  return jspb.Message.setProto3FloatField(this, 13, value);
};


/**
 * optional double pretaxIncome = 14;
 * @return {number}
 */
proto.IncomeStatement.prototype.getPretaxincome = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 14, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.IncomeStatement} returns this
 */
proto.IncomeStatement.prototype.setPretaxincome = function(value) {
  return jspb.Message.setProto3FloatField(this, 14, value);
};


/**
 * optional double incomeTax = 15;
 * @return {number}
 */
proto.IncomeStatement.prototype.getIncometax = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 15, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.IncomeStatement} returns this
 */
proto.IncomeStatement.prototype.setIncometax = function(value) {
  return jspb.Message.setProto3FloatField(this, 15, value);
};


/**
 * optional double minorityInterest = 16;
 * @return {number}
 */
proto.IncomeStatement.prototype.getMinorityinterest = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 16, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.IncomeStatement} returns this
 */
proto.IncomeStatement.prototype.setMinorityinterest = function(value) {
  return jspb.Message.setProto3FloatField(this, 16, value);
};


/**
 * optional double netIncome = 17;
 * @return {number}
 */
proto.IncomeStatement.prototype.getNetincome = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 17, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.IncomeStatement} returns this
 */
proto.IncomeStatement.prototype.setNetincome = function(value) {
  return jspb.Message.setProto3FloatField(this, 17, value);
};


/**
 * optional double netIncomeBasic = 18;
 * @return {number}
 */
proto.IncomeStatement.prototype.getNetincomebasic = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 18, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.IncomeStatement} returns this
 */
proto.IncomeStatement.prototype.setNetincomebasic = function(value) {
  return jspb.Message.setProto3FloatField(this, 18, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.CashFlows.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CashFlows.prototype.toObject = function(opt_includeInstance) {
  return proto.CashFlows.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CashFlows} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CashFlows.toObject = function(includeInstance, msg) {
  var f, obj = {
    cashflowsList: jspb.Message.toObjectList(msg.getCashflowsList(),
    proto.CashFlow.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CashFlows}
 */
proto.CashFlows.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CashFlows;
  return proto.CashFlows.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CashFlows} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CashFlows}
 */
proto.CashFlows.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.CashFlow;
      reader.readMessage(value,proto.CashFlow.deserializeBinaryFromReader);
      msg.addCashflows(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CashFlows.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CashFlows.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CashFlows} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CashFlows.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCashflowsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.CashFlow.serializeBinaryToWriter
    );
  }
};


/**
 * repeated CashFlow cashFlows = 1;
 * @return {!Array<!proto.CashFlow>}
 */
proto.CashFlows.prototype.getCashflowsList = function() {
  return /** @type{!Array<!proto.CashFlow>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.CashFlow, 1));
};


/**
 * @param {!Array<!proto.CashFlow>} value
 * @return {!proto.CashFlows} returns this
*/
proto.CashFlows.prototype.setCashflowsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.CashFlow=} opt_value
 * @param {number=} opt_index
 * @return {!proto.CashFlow}
 */
proto.CashFlows.prototype.addCashflows = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.CashFlow, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.CashFlows} returns this
 */
proto.CashFlows.prototype.clearCashflowsList = function() {
  return this.setCashflowsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CashFlow.prototype.toObject = function(opt_includeInstance) {
  return proto.CashFlow.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CashFlow} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CashFlow.toObject = function(includeInstance, msg) {
  var f, obj = {
    reportdate: (f = msg.getReportdate()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    fiscaldate: (f = msg.getFiscaldate()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    currency: jspb.Message.getFieldWithDefault(msg, 3, ""),
    netincome: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    depreciation: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
    changesinreceivables: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
    changesininventories: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 0.0),
    cashchange: jspb.Message.getFloatingPointFieldWithDefault(msg, 8, 0.0),
    cashflow: jspb.Message.getFloatingPointFieldWithDefault(msg, 9, 0.0),
    capitalexpenditures: jspb.Message.getFloatingPointFieldWithDefault(msg, 10, 0.0),
    investments: jspb.Message.getFloatingPointFieldWithDefault(msg, 11, 0.0),
    investingactivityother: jspb.Message.getFloatingPointFieldWithDefault(msg, 12, 0.0),
    totalinvestingcashflows: jspb.Message.getFloatingPointFieldWithDefault(msg, 13, 0.0),
    dividendspaid: jspb.Message.getFloatingPointFieldWithDefault(msg, 14, 0.0),
    netborrowings: jspb.Message.getFloatingPointFieldWithDefault(msg, 15, 0.0),
    otherfinancingcashflows: jspb.Message.getFloatingPointFieldWithDefault(msg, 16, 0.0),
    cashflowfinancing: jspb.Message.getFloatingPointFieldWithDefault(msg, 17, 0.0),
    exchangerateeffect: jspb.Message.getFloatingPointFieldWithDefault(msg, 18, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CashFlow}
 */
proto.CashFlow.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CashFlow;
  return proto.CashFlow.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CashFlow} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CashFlow}
 */
proto.CashFlow.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setReportdate(value);
      break;
    case 2:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setFiscaldate(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCurrency(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setNetincome(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDepreciation(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setChangesinreceivables(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setChangesininventories(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCashchange(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCashflow(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCapitalexpenditures(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setInvestments(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setInvestingactivityother(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTotalinvestingcashflows(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDividendspaid(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setNetborrowings(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setOtherfinancingcashflows(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCashflowfinancing(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setExchangerateeffect(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CashFlow.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CashFlow.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CashFlow} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CashFlow.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReportdate();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getFiscaldate();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getCurrency();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getNetincome();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = message.getDepreciation();
  if (f !== 0.0) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = message.getChangesinreceivables();
  if (f !== 0.0) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = message.getChangesininventories();
  if (f !== 0.0) {
    writer.writeDouble(
      7,
      f
    );
  }
  f = message.getCashchange();
  if (f !== 0.0) {
    writer.writeDouble(
      8,
      f
    );
  }
  f = message.getCashflow();
  if (f !== 0.0) {
    writer.writeDouble(
      9,
      f
    );
  }
  f = message.getCapitalexpenditures();
  if (f !== 0.0) {
    writer.writeDouble(
      10,
      f
    );
  }
  f = message.getInvestments();
  if (f !== 0.0) {
    writer.writeDouble(
      11,
      f
    );
  }
  f = message.getInvestingactivityother();
  if (f !== 0.0) {
    writer.writeDouble(
      12,
      f
    );
  }
  f = message.getTotalinvestingcashflows();
  if (f !== 0.0) {
    writer.writeDouble(
      13,
      f
    );
  }
  f = message.getDividendspaid();
  if (f !== 0.0) {
    writer.writeDouble(
      14,
      f
    );
  }
  f = message.getNetborrowings();
  if (f !== 0.0) {
    writer.writeDouble(
      15,
      f
    );
  }
  f = message.getOtherfinancingcashflows();
  if (f !== 0.0) {
    writer.writeDouble(
      16,
      f
    );
  }
  f = message.getCashflowfinancing();
  if (f !== 0.0) {
    writer.writeDouble(
      17,
      f
    );
  }
  f = message.getExchangerateeffect();
  if (f !== 0.0) {
    writer.writeDouble(
      18,
      f
    );
  }
};


/**
 * optional google.protobuf.Timestamp reportDate = 1;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.CashFlow.prototype.getReportdate = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 1));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.CashFlow} returns this
*/
proto.CashFlow.prototype.setReportdate = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.CashFlow} returns this
 */
proto.CashFlow.prototype.clearReportdate = function() {
  return this.setReportdate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.CashFlow.prototype.hasReportdate = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional google.protobuf.Timestamp fiscalDate = 2;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.CashFlow.prototype.getFiscaldate = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 2));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.CashFlow} returns this
*/
proto.CashFlow.prototype.setFiscaldate = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.CashFlow} returns this
 */
proto.CashFlow.prototype.clearFiscaldate = function() {
  return this.setFiscaldate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.CashFlow.prototype.hasFiscaldate = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string currency = 3;
 * @return {string}
 */
proto.CashFlow.prototype.getCurrency = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.CashFlow} returns this
 */
proto.CashFlow.prototype.setCurrency = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional double netIncome = 4;
 * @return {number}
 */
proto.CashFlow.prototype.getNetincome = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.CashFlow} returns this
 */
proto.CashFlow.prototype.setNetincome = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional double depreciation = 5;
 * @return {number}
 */
proto.CashFlow.prototype.getDepreciation = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.CashFlow} returns this
 */
proto.CashFlow.prototype.setDepreciation = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional double changesInReceivables = 6;
 * @return {number}
 */
proto.CashFlow.prototype.getChangesinreceivables = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.CashFlow} returns this
 */
proto.CashFlow.prototype.setChangesinreceivables = function(value) {
  return jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional double changesInInventories = 7;
 * @return {number}
 */
proto.CashFlow.prototype.getChangesininventories = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.CashFlow} returns this
 */
proto.CashFlow.prototype.setChangesininventories = function(value) {
  return jspb.Message.setProto3FloatField(this, 7, value);
};


/**
 * optional double cashChange = 8;
 * @return {number}
 */
proto.CashFlow.prototype.getCashchange = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.CashFlow} returns this
 */
proto.CashFlow.prototype.setCashchange = function(value) {
  return jspb.Message.setProto3FloatField(this, 8, value);
};


/**
 * optional double cashFlow = 9;
 * @return {number}
 */
proto.CashFlow.prototype.getCashflow = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 9, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.CashFlow} returns this
 */
proto.CashFlow.prototype.setCashflow = function(value) {
  return jspb.Message.setProto3FloatField(this, 9, value);
};


/**
 * optional double capitalExpenditures = 10;
 * @return {number}
 */
proto.CashFlow.prototype.getCapitalexpenditures = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 10, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.CashFlow} returns this
 */
proto.CashFlow.prototype.setCapitalexpenditures = function(value) {
  return jspb.Message.setProto3FloatField(this, 10, value);
};


/**
 * optional double investments = 11;
 * @return {number}
 */
proto.CashFlow.prototype.getInvestments = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 11, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.CashFlow} returns this
 */
proto.CashFlow.prototype.setInvestments = function(value) {
  return jspb.Message.setProto3FloatField(this, 11, value);
};


/**
 * optional double investingActivityOther = 12;
 * @return {number}
 */
proto.CashFlow.prototype.getInvestingactivityother = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 12, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.CashFlow} returns this
 */
proto.CashFlow.prototype.setInvestingactivityother = function(value) {
  return jspb.Message.setProto3FloatField(this, 12, value);
};


/**
 * optional double totalInvestingCashFlows = 13;
 * @return {number}
 */
proto.CashFlow.prototype.getTotalinvestingcashflows = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 13, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.CashFlow} returns this
 */
proto.CashFlow.prototype.setTotalinvestingcashflows = function(value) {
  return jspb.Message.setProto3FloatField(this, 13, value);
};


/**
 * optional double dividendsPaid = 14;
 * @return {number}
 */
proto.CashFlow.prototype.getDividendspaid = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 14, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.CashFlow} returns this
 */
proto.CashFlow.prototype.setDividendspaid = function(value) {
  return jspb.Message.setProto3FloatField(this, 14, value);
};


/**
 * optional double netBorrowings = 15;
 * @return {number}
 */
proto.CashFlow.prototype.getNetborrowings = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 15, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.CashFlow} returns this
 */
proto.CashFlow.prototype.setNetborrowings = function(value) {
  return jspb.Message.setProto3FloatField(this, 15, value);
};


/**
 * optional double otherFinancingCashFlows = 16;
 * @return {number}
 */
proto.CashFlow.prototype.getOtherfinancingcashflows = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 16, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.CashFlow} returns this
 */
proto.CashFlow.prototype.setOtherfinancingcashflows = function(value) {
  return jspb.Message.setProto3FloatField(this, 16, value);
};


/**
 * optional double cashFlowFinancing = 17;
 * @return {number}
 */
proto.CashFlow.prototype.getCashflowfinancing = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 17, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.CashFlow} returns this
 */
proto.CashFlow.prototype.setCashflowfinancing = function(value) {
  return jspb.Message.setProto3FloatField(this, 17, value);
};


/**
 * optional double exchangeRateEffect = 18;
 * @return {number}
 */
proto.CashFlow.prototype.getExchangerateeffect = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 18, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.CashFlow} returns this
 */
proto.CashFlow.prototype.setExchangerateeffect = function(value) {
  return jspb.Message.setProto3FloatField(this, 18, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Financials.prototype.toObject = function(opt_includeInstance) {
  return proto.Financials.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Financials} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Financials.toObject = function(includeInstance, msg) {
  var f, obj = {
    balancesheets: (f = msg.getBalancesheets()) && proto.BalanceSheets.toObject(includeInstance, f),
    incomestatements: (f = msg.getIncomestatements()) && proto.IncomeStatements.toObject(includeInstance, f),
    cashflows: (f = msg.getCashflows()) && proto.CashFlows.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Financials}
 */
proto.Financials.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Financials;
  return proto.Financials.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Financials} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Financials}
 */
proto.Financials.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.BalanceSheets;
      reader.readMessage(value,proto.BalanceSheets.deserializeBinaryFromReader);
      msg.setBalancesheets(value);
      break;
    case 2:
      var value = new proto.IncomeStatements;
      reader.readMessage(value,proto.IncomeStatements.deserializeBinaryFromReader);
      msg.setIncomestatements(value);
      break;
    case 3:
      var value = new proto.CashFlows;
      reader.readMessage(value,proto.CashFlows.deserializeBinaryFromReader);
      msg.setCashflows(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Financials.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Financials.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Financials} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Financials.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBalancesheets();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.BalanceSheets.serializeBinaryToWriter
    );
  }
  f = message.getIncomestatements();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.IncomeStatements.serializeBinaryToWriter
    );
  }
  f = message.getCashflows();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.CashFlows.serializeBinaryToWriter
    );
  }
};


/**
 * optional BalanceSheets balanceSheets = 1;
 * @return {?proto.BalanceSheets}
 */
proto.Financials.prototype.getBalancesheets = function() {
  return /** @type{?proto.BalanceSheets} */ (
    jspb.Message.getWrapperField(this, proto.BalanceSheets, 1));
};


/**
 * @param {?proto.BalanceSheets|undefined} value
 * @return {!proto.Financials} returns this
*/
proto.Financials.prototype.setBalancesheets = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Financials} returns this
 */
proto.Financials.prototype.clearBalancesheets = function() {
  return this.setBalancesheets(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Financials.prototype.hasBalancesheets = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional IncomeStatements incomeStatements = 2;
 * @return {?proto.IncomeStatements}
 */
proto.Financials.prototype.getIncomestatements = function() {
  return /** @type{?proto.IncomeStatements} */ (
    jspb.Message.getWrapperField(this, proto.IncomeStatements, 2));
};


/**
 * @param {?proto.IncomeStatements|undefined} value
 * @return {!proto.Financials} returns this
*/
proto.Financials.prototype.setIncomestatements = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Financials} returns this
 */
proto.Financials.prototype.clearIncomestatements = function() {
  return this.setIncomestatements(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Financials.prototype.hasIncomestatements = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional CashFlows cashFlows = 3;
 * @return {?proto.CashFlows}
 */
proto.Financials.prototype.getCashflows = function() {
  return /** @type{?proto.CashFlows} */ (
    jspb.Message.getWrapperField(this, proto.CashFlows, 3));
};


/**
 * @param {?proto.CashFlows|undefined} value
 * @return {!proto.Financials} returns this
*/
proto.Financials.prototype.setCashflows = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Financials} returns this
 */
proto.Financials.prototype.clearCashflows = function() {
  return this.setCashflows(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Financials.prototype.hasCashflows = function() {
  return jspb.Message.getField(this, 3) != null;
};


goog.object.extend(exports, proto);
